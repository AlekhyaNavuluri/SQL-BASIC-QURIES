// Request 1

List the last name, first name and employee number of all employees that have a last name starting with M.

select Employee_No,First_Name,Last_Name from Employees where Last_Name like 'm%';

// Request 2
List the last name, first name and employee number of all programmers who were hired on or before 11 Feburary 1994 sorted in descending order of last name
*HINT* JOIN Jobs
select Last_Name,First_Name,Employee_No,Hire_Date, jobs.Job_Title from Employees 
join jobs on Employees.Job_ID = Jobs.Job_ID where jobs.Job_Title = 'programmers' and Hire_Date >= '1994-02-11' order by Last_Name;

// Request 3
List all the data for all jobs where the maximum salary is greater than 12000 sorted in ascending order of the maximum salary.

 select * from jobs where Max_Salary >= 12000 order by Max_Salary ASC;

// Request 4
List all the data for all jobs where the minimum salary is less than or equal to 4500 sorted in descending order of the minimum salary.

select * from jobs where Min_Salary <= 4500 order by Min_Salary DESC;

// Request 5
List the department name, location, last name and salary of employees who work in location 1700 sorted in ascending order of department name.
*HINT* JOIN Employees

select Departments.Department_Name,Departments.Location_ID, Employees.Last_Name,Employees.Annual_Salary from Departments join Employees
on Employees.Department_No = Departments.Department_No where Location_ID = 1700 order by Department_Name Asc;

select Departments.Department_Name,Departments.Location_ID, Employees.Last_Name,Employees.Annual_Salary from Departments, Employees where Location_ID = 1700 order by Department_Name;

// Request 6

Which jobs are found in the Marketing and Accounting departments? 
*HINT* JOIN Employees JOIN Jobs OR

select * from Departments where Department_Name IN ('Marketing', 'Accounting');

select Distinct Employees.Job_ID, Departments.Department_Name from Employees, Departments where Department_Name IN('Marketing', 'Accounting');
 

// Request 7
Show the total salaries figure for one week displayed with no decimal places.
select Department_No, (CAST((Annual_salary / 52) as decimal(8, 0))) as monthlysal from Employees ;


// Request 8
Show the total number of jobs.
SELECT COUNT(Job_ID) FROM Jobs

// Request 9
List the department number, department name and the number of employees for each department that has less than 4 employees grouping by department number and department name.
*HINT* JOIN Employees. The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.

select Departments.Department_No, Departments.Department_Name, COUNT(Employees.Employee_No) as employeecount from Employees
 join departments on  Employees.Department_No = Departments.Department_No group by Departments.Department_No,
Departments.Department_Name having COUNT(Employees.Employee_No) < 4;

// Request 10
List the department number, department name and the number of employees for the department that has the lowest number of employees using appropriate grouping
*HINT* JOIN Employees

select TOP 1 Departments.Department_No, Departments.Department_Name, COUNT(Employees.Employee_No) as employeecount
 from Departments join Employees on Employees.Department_No = Departments.Department_No group by Departments.Department_No,Departments.Department_Name order by employeecount;



// Request 11
List the department number and name for all departments where no sales representatives work.
List the department number and name for all departments that don't have any sales reps in them.
*HINT* JOIN Employees JOIN Jobs

select distinct Departments.Department_No, Departments.Department_Name from Departments 
join Employees on Employees.Department_No = Departments.Department_No where Departments.Department_No NOT IN(select employees.Department_No from Employees
 join jobs on Employees.Job_ID = Jobs.Job_ID where jobs.Job_Title = 'sales Representative');
 


// Request 12
Add the following new job IT_ASST, IT Assistant, 5000, 8000
insert into jobs values('IT_ASST', 'IT Assistant', 5000, 8000);

// Request 13
Update all the maximum salaries for jobs with an increase of 2000
update jobs set  max_salary += 2000;


// Request 14
List all the data for jobs sorted in descending order of job id.
select * from jobs order by Job_ID DESC;

// Request 15
5 a) The job history for employee number 123 is no longer required. Delete this record.
  b) List all the data for job history sorted in descending order of employee number.

delete from Job_History where employee_No = 125;
select * from Job_History order by Employee_No DESC;


// Request 16
Create a new view for clerks’s details only using all the fields from the employee table.
*HINT* '%CLERK'
create view clerkdetails as select * from Employees where Employees.Job_ID like '%CLERK%';

// Request 17
Show all the fields and all the clerks using the view for clerks sorted in descending order of employee number.
select * from clerkdetails order by employee_no DESC;

// Request 18
Grant the authority to all other users to access the view for clecks for SELECT statements only.
GRANT SELECT ON clerkdetails TO PUBLIC;
select * from clerkdetails;

// Request 19
Create an index named LOC_POSTAL_CODE on the Postal Code in the locations table. Provide a printout showing that the index has been created.
CREATE INDEX LOC_POSTAL_CODE ON Locations(Postal_Code);


